

html, body {
  background: #151515;
  overflow: hidden;

  @media only screen and (max-width: 600px){
    font-size: 9px;
  }
}
.bg {
  width: 100%;
  height: 100%;
  pointer-events: none;
  position: absolute;
  background-image: url("bg.png");
  opacity: 0.62;
  z-index: 1;
  top: 0;
  left: 0;
}

.text {
  width: 100%;
  max-width: 1200px;
  margin: auto;
  margin-top: 15vw;
  font-family: "Fira Code";
  color: #F2F2F5;
  position: relative;
  z-index: 2;
  font-weight: 400;
  font-size: 2rem;
  padding: 15px;
  box-sizing: border-box;
  overflow: hidden;

  @media only screen and (max-width: 600px){
    padding-top: 25vw;
  }

}
.text p {
  display: block;
  margin-bottom: 45px;
}
a {
  color: inherit;
  text-decoration: none;
  position: relative;

  @keyframes moveBorder {
    from {
      transform: translateY(2px);
      opacity: 0.2;
    }
    to {
      transform: translateY(0);
      opacity: 0.6;
    }
  }

  &:not(.glitch):after {
    content: "";
    width: 100%;
    height: 1px;
    background: #FFF;
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    animation: moveBorder 2s infinite alternate;
  }
}

#text2b:not(.glitch):after {
  background: #FF0091;
}
// Ignore all of this, scroll down until you see the next comment.
// I just like my eye candy. 



// Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy { 
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
}

.glitch {
	position: relative;
	color: white;
	/* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
	
	// Creates a copy before our text. 
	&::before{
		// Duplicates our text with the mixin.
		@include glitchCopy;
		// Scoots text slightly to the left for the color offset.
		left: 2px;
		// Creates the color 'shadow' that happens on the glitch.
		text-shadow: -2px 0 #ff00c1;
		/* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
		clip: rect(44px, 450px, 56px, 0);
		/* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
		animation: glitch-anim 2s infinite linear alternate-reverse;
	}
	
	// Creates a copy after our text. Note comments from ::before.
	&::after {
		@include glitchCopy;
		left: -2px;
		text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
		animation: glitch-anim2 5s infinite linear alternate-reverse;
	}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}